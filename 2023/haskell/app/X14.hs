import Lude

import qualified Data.Map.Strict as Map


data Tile = R | S | G deriving (Show, Eq)
tileTypes = \case 'O' -> R; '#' -> S; '.' -> G;
undoTileTypes = \case R -> 'O'; S -> '#';  G -> '.';

slideRock :: ((Int, Int) -> (Int, Int)) -> Grid Tile -> (Int, Int) -> Grid Tile
slideRock dir g c = case Map.lookup (dir c) g of
  Just G -> slideRock dir (Map.insert c G (Map.insert (dir c) R g)) (dir c)
  _ -> g

doUntilStable fn i =
  let res = fn i
      res2 = fn (fn i)
  in if res == res2 then res else doUntilStable fn res2

main :: IO ()
main = do
  let input = testInput
  input <- lines <$> readFile "inputs/14"

  -- part one
  let parsed = input & mkGrid & Map.map tileTypes
      getRocks i = Map.filter (== R) i & Map.keys & sort
      shuffleDir dir = doUntilStable (\i' -> foldl (slideRock dir) i' (getRocks i'))
      calculateLoad i' = [length input - r | ((r, _), _) <- Map.toAscList (Map.filter (== R) i')]
  print $ calculateLoad (shuffleDir up parsed) & sum

  -- part two
  let doCycle i' = shuffleDir right $ shuffleDir down $ shuffleDir left (shuffleDir up i')
      doTimes 0 _ r = r
      doTimes x fn r = doTimes (x - 1) fn (fn r)

  -- print $ doTimes 1000000000 doCycle parsed & calculateLoad & sum
  -- print $ [doTimes x doCycle parsed & calculateLoad & sum | x <- [1..200]]
  -- print $ (cycle [69,69,65,64,65,63,68]) !! 1000000004
  -- print $ calculateLoad spinCycle & sum
  let f = [99711,99670,99745,99902,100161,100344,100567,100779,100993,101146,101320,101488,101635,101736,101857,102018,102193,102360,102582,102753,102939,103092,103287,103431,103592,103742,103899,104015,104149,104265,104372,104454,104513,104590,104671,104706,104767,104827,104918,104963,105034,105106,105183,105237,105319,105437,105555,105661,105758,105849,105960,106063,106161,106212,106255,106307,106369,106417,106510,106569,106599,106656,106716,106754,106811,106856,106915,106942,106994,107038,107093,107133,107187,107243,107325,107388,107451,107513,107558,107556,107563,107571,107562,107563,107579,107613,107647,107667,107695,107727,107768,107784,107797,107803,107825,107864,107913,107963,108006,108044,108082,108118,108175,108228,108279,108322,108369,108400,108430,108444,108465,108481,108491,108481,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467,108486,108478,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467,108486,108478,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467,108486,108478,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467]
           ++ (cycle [108486,108478,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467])
  print (f !! (1000000000 - 1))

  -- tried: 108425 -- too high
  -- 108440 too high
  --- 108404

pMap :: (Eq a, Num a) => Map.Map (a, Int) Tile -> IO ()
pMap m =
  let mapToString m =
        let len = last [y | ((x, y), _) <- Map.toAscList m, x == 0]
            chunked = chunksOf (len + 1) (Map.toAscList m)
        in map (map snd) chunked
  in mapM_ putStrLn (mapToString  (Map.map undoTileTypes m))

-- [99711,99670,99745,99902,100161,100344,100567,100779,100993,101146,101320,101488,101635,101736,101857,102018,102193,102360,102582,102753,102939,103092,103287,103431,103592,103742,103899,104015,104149,104265,104372,104454,104513,104590,104671,104706,104767,104827,104918,104963,105034,105106,105183,105237,105319,105437,105555,105661,105758,105849,105960,106063,106161,106212,106255,106307,106369,106417,106510,106569,106599,106656,106716,106754,106811,106856,106915,106942,106994,107038,107093,107133,107187,107243,107325,107388,107451,107513,107558,107556,107563,107571,107562,107563,107579,107613,107647,107667,107695,107727,107768,107784,107797,107803,107825,107864,107913,107963,108006,108044] 
-- [99711,99670,99745,99902,100161,100344,100567,100779,100993,101146,101320,101488,101635,101736,101857,102018,102193,102360,102582,102753,102939,103092,103287,103431,103592,103742,103899,104015,104149,104265,104372,104454,104513,104590,104671,104706,104767,104827,104918,104963,105034,105106,105183,105237,105319,105437,105555,105661,105758,105849,105960,106063,106161,106212,106255,106307,106369,106417,106510,106569,106599,106656,106716,106754,106811,106856,106915,106942,106994,107038,107093,107133,107187,107243,107325,107388,107451,107513,107558,107556,107563,107571,107562,107563,107579,107613,107647,107667,107695,107727,107768,107784,107797,107803,107825,107864,107913,107963,108006,108044,108082,108118,108175,108228,108279,108322,108369,108400,108430,108444,108465,108481,108491,108481,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467,108486,108478,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467,108486,108478,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467,108486,108478,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467]
-- [99711,99670,99745,99902,100161,100344,100567,100779,100993,101146,101320,101488,101635,101736,101857,102018,102193,102360,102582,102753,102939,103092,103287,103431,103592,103742,103899,104015,104149,104265,104372,104454,104513,104590,104671,104706,104767,104827,104918,104963,105034,105106,105183,105237,105319,105437,105555,105661,105758,105849,105960,106063,106161,106212,106255,106307,106369,106417,106510,106569,106599,106656,106716,106754,106811,106856,106915,106942,106994,107038,107093,107133,107187,107243,107325,107388,107451,107513,107558,107556,107563,107571,107562,107563,107579,107613,107647,107667,107695,107727,107768,107784,107797,107803,107825,107864,107913,107963,108006,108044,108082,108118,108175,108228,108279,108322,108369,108400,108430,108444,108465,108481,108491,108481,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467,108486,108478,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467,108486,108478,108472,108455,108440,108424,108410,108404,108425,108440,108472,108481,108483,108467,108460,108435,108429,108405,108409,108420,108445,108467,
-- 69,69,65,64,65,63,68,
-- 69,69,65,64,65,63,68,

testInput =
  [ "O....#...."
  , "O.OO#....#"
  , ".....##..."
  , "OO.#O....O"
  , ".O.....O#."
  , "O.#..O.#.#"
  , "..O..#O..O"
  , ".......O.."
  , "#....###.."
  , "#OO..#...." ]